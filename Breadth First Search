#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 100
#define QUEUE_SIZE 100
int visited[MAX_VERTICES];
int queue[QUEUE_SIZE];
int front = -1, rear = -1;
void enqueue(int vertex) {
    if (rear == QUEUE_SIZE - 1) {
        printf("Queue overflow\n");
        return;
    }
    if (front == -1)
        front = 0;
    rear++;
    queue[rear] = vertex;
}
int dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue underflow\n");
        return -1;
    }
    int element = queue[front];
    front++;
    return element;
}
int isEmpty() {
    if (front == -1 || front > rear)
        return 1;
    else
        return 0;
}
void bfs(int graph[][MAX_VERTICES], int start_vertex, int num_vertices) {
    enqueue(start_vertex);
    visited[start_vertex] = 1;
    while (!isEmpty()) {
        int current_vertex = dequeue();
        printf("%d ", current_vertex);
        for (int i = 0; i < num_vertices; ++i) {
            if (graph[current_vertex][i] && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}
void initializeVisited(int num_vertices) {
    for (int i = 0; i < num_vertices; ++i) {
        visited[i] = 0;
    }
}
int main() {
    int num_vertices, num_edges;
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &num_vertices, &num_edges);
    int graph[MAX_VERTICES][MAX_VERTICES] = {0};
    printf("Enter the edges:\n");
    for (int i = 0; i < num_edges; ++i) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        graph[src][dest] = 1;
        graph[dest][src] = 1;
    }
    initializeVisited(num_vertices);
    printf("Breadth First Traversal: ");
    bfs(graph, 0, num_vertices);
    printf("\n");
}

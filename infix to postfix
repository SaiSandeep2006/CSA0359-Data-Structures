#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#define MAX_SIZE 50
typedef struct {
    int top;
    char items[MAX_SIZE];
} Stack;
void push(Stack stack, char item) {
    if (stack.top == MAX_SIZE - 1) {
        printf("Stack overflow\n");
        exit(EXIT_FAILURE);
    }
    stack.items[++stack.top] = item;
}
char pop(Stack stack) {
    if (stack.top == -1) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }
    return stack.items[stack.top--];
}
int isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}
int precedence(char c) {
    if (c == '+' || c == '-') return 1;
    if (c == '*' || c == '/') return 2;
    return 0;
}
void infixToPostfix(char infix[], char postfix[]) {
    Stack stack;
    stack.top = -1;
    int i, j = 0;
    for (i = 0; infix[i] != '\0'; i++) {
        if (isalnum(infix[i])) {
            postfix[j++] = infix[i];
        } else if (infix[i] == '(') {
            push(stack, infix[i]);
        } else if (infix[i] == ')') {
            while (stack.top != -1 && stack.items[stack.top] != '(') {
                postfix[j++] = pop(stack);
            }
            pop(stack); 
        } else if (isOperator(infix[i])) {
            while (stack.top != -1 && precedence(stack.items[stack.top]) >= precedence(infix[i])) {
                postfix[j++] = pop(stack);
            }
            push(stack, infix[i]);
        }
    }
    while (stack.top != -1) {
        postfix[j++] = pop(stack);
    }
    postfix[j] = '\0';
}
int main() {
    char infix[MAX_SIZE], postfix[MAX_SIZE];
    printf("Enter the infix expression: ");
    scanf("%s", infix);
    infixToPostfix(infix, postfix);
    printf("Postfix notation: %s \n", postfix);

}
